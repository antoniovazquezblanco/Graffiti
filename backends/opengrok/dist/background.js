(()=>{"use strict";var e={630:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.onExtMessageEx=t.onExtMessage=t.sendExtMessage=t.setPrefs=t.getPrefs=void 0;const n={tabBehavior:"alwaysNew"};t.getPrefs=function(e){chrome.storage.local.get(Object.keys(n)).then((t=>e(Object.assign(Object.assign({},n),t))))},t.setPrefs=function(e){chrome.storage.local.set(e)},t.sendExtMessage=function(e){return chrome.runtime.sendMessage(e)},t.onExtMessage=function(e){chrome.runtime.onMessage.addListener(((t,n,o)=>(e(t),o({}),!0)))},t.onExtMessageEx=function(e){chrome.runtime.onMessage.addListener(((t,n,o)=>e(t,o)))}}},t={};function n(o){var s=t[o];if(void 0!==s)return s.exports;var i=t[o]={exports:{}};return e[o](i,i.exports,n),i.exports}(()=>{const e=n(630);let t,o;function s(e){chrome.windows.getAll({populate:!0},(function(t){const n=t.filter((e=>0==(e.tabs||[]).filter((e=>"Graffiti"==e.title)).length));if(n.length){const t=n.filter((e=>e.focused));t.length?chrome.tabs.create({url:e,windowId:t[0].id}):chrome.tabs.create({url:e,windowId:n[0].id})}else chrome.windows.create({url:e})}))}function i(e){if(console.log(e),!e.isCorrectWebsite)return;const n=e.info;if(null==n)return void chrome.notifications.create("noSymbol",{type:"basic",iconUrl:"images/icon.png",title:"Graffiti",message:"Could not find symbol in this line"});const o=t;if(null==o)return void chrome.notifications.create("notConnected",{type:"basic",iconUrl:"images/icon.png",title:"Graffiti",message:"Not connected to server"});const s={type:"addData",node:{project:"OpenGrok: "+n.site,address:n.address,label:n.fileName+"::\n"+n.sig,computedProperties:[]}};n.edgeLabel&&(s.edge={label:n.edgeLabel}),o.send(JSON.stringify(s))}function r(e){if(console.log(e),!e.isCorrectWebsite)return;const n=e.info;if(null==n)return void chrome.notifications.create("noLine",{type:"basic",iconUrl:"images/icon.png",title:"Graffiti",message:"Could not find a line"});const o=t;if(null==o)return void chrome.notifications.create("notConnected",{type:"basic",iconUrl:"images/icon.png",title:"Graffiti",message:"Not connected to server"});const s=n.sig?n.fileName+"::\n"+n.sig+":"+n.line:n.fileName+":"+n.line,i={type:"addData",node:{project:"OpenGrok: "+n.site,address:n.address,label:s,line:n.line,computedProperties:[]}};n.edgeLabel&&(i.edge={label:n.edgeLabel}),o.send(JSON.stringify(i))}function c(e,t,n){const o="add_line_to_graffiti"==e,s={action:"getSymbolRequest",source:n?"contextMenu":"command",isLine:o,askForEdgeText:"add_to_graffiti_with_custom_edge"==e};console.log(t),chrome.tabs.sendMessage(t.id,s,o?r:i)}chrome.runtime.onStartup.addListener((()=>{console.log("onStartup()")})),(0,e.getPrefs)((e=>{o=e})),chrome.storage.onChanged.addListener(((t,n)=>{(0,e.getPrefs)((e=>{o=e}))})),chrome.runtime.onInstalled.addListener((()=>{chrome.contextMenus.create({id:"add_to_graffiti",title:"Add to Graph",contexts:["page"]}),chrome.contextMenus.create({id:"add_to_graffiti_with_custom_edge",title:"Add to Graph with edge comment",contexts:["page"]}),chrome.contextMenus.create({id:"add_line_to_graffiti",title:"Add current line to Graph",contexts:["page"]}),chrome.contextMenus.onClicked.addListener(((e,t)=>{t&&c(e.menuItemId,t,!0)}))})),(0,e.onExtMessage)((n=>{console.log("received:",n),"connectPull"==n.action?function(n){null!=t&&(t.readyState!==WebSocket.CLOSED&&t.close(),t=null);const i=new WebSocket(n);t=i,t.onopen=function(t){(0,e.sendExtMessage)({action:"getConnectionPullResult",status:!0})},t.onerror=function(n){(0,e.sendExtMessage)({action:"getConnectionPullResult",status:!1}),t==i&&(t=null)},t.onclose=function(n){(0,e.sendExtMessage)({action:"getConnectionPullResult",status:!1}),t==i&&(t=null)},t.onmessage=function(e){const t=JSON.parse(e.data);if("project"in t&&!t.project.startsWith("OpenGrok:"))return;const n=t.address,i=o.tabBehavior;"alwaysNew"==i?s(n):"sameIfExists"==i&&function(e){const t=new URL(e);t.hash="";const n=t.toString();chrome.tabs.query({},(function(t){const o=t.filter((e=>(e.url||"").indexOf(n)>=0&&e.windowId!=chrome.windows.WINDOW_ID_CURRENT));0==o.length?s(e):chrome.tabs.update(o[o.length-1].id,{url:e,active:!0})}))}(n)}}(n.addr):"getConnectionPullRequest"==n.action&&null!=t&&(0,e.sendExtMessage)({action:"getConnectionPullResult",status:t.readyState!==WebSocket.CLOSED})})),chrome.commands.onCommand.addListener((function(e){chrome.tabs.query({active:!0,lastFocusedWindow:!0},(function(t){t.forEach((t=>c(e,t,!1)))}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,